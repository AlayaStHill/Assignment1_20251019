Tanke:
UIService
Interaktionslogik: skriva ut text, läsa in svar.

MenuService
Programflödet: visa meny, avgöra vad som händer beroende på användarens val, anropa rätt tjänst (produktmanager).

ProductManager (domain-lager?)
Samordningslogik: fungerar som mellanlager, anropar både ProductService och JsonFileRepository för att hämta, returnera.

ProductService
Affärslogik: hantera produktlistan i minnet; lägga till nya produkter i listan, ersätta den med innehåll från fil.

FileService

JsonFileRepository 
Datainlagring: läsa/spara listan av produkter till en fil.

---------------------------------------------------------------------------------------------------------------------------------------------------------------- 
För att uppnå kravet för godkänt krävs följande:

Applikationen kan vara en konsolapplikation.
Skapa en klass som heter Product.
Skapa en lista av produkter (List<Product>) i programmet för att lagra produkterna.
Implementera en funktion för att lägga till en ny produkt till listan. Användaren ska kunna ange produktens namn och pris, och produkten ska automatiskt få ett Globalt Unikt ID.
Implementera en funktion som visar alla produkter i listan med ID, namn och pris.
Implementera en funktion som läser in produkter från en tidigare sparad textfil och lägger till dem i listan.
Implementera en funktion som sparar alla produkter i listan till en textfil. Filen ska innehålla produktinformation som finns i listan och vara sparat i .json-format.
Skapa enhetstester för att säkerställa att en produkt läggs till i lista samt att listan populeras med produkter när en fil har lästs in.
Ja du får skriva allt i Program.cs om du så vill. Men jag rekommenderar att du använder dig av olika services för att genomföra detta.
Du behöver använda dig av Git/GitHub men du behöver endast använda dig av main/master och inte göra olika branches.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Både fileservice och filerepository med interface på båda:

skickar in filerepository i fileservice konstruktor

Repository: utför den riktiga handlingen(allt som inbegriper att utföra något mot fil) hämtar fil, checkar om katalogen finns där filen ska finnas

Fileservice har logiken kollar att fil finns

testar båda, när båda är gröna har testat

allt som innehåller funktionalitet i ett projekt testas

Man börjar med tester längst ut i kedjan = fileService/repository --> productService --> productmanager
Testas UIService?

Man gör private readonly med dependencies även i tester och lägger in dessa i knstruktor. Lättare att förstå .Object då.